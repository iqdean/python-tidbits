challenge3-parselog-file.txt  - see if we can do the same thing using python re module

REF: 
http://www.pythonlearn.com/html-007/cfbook012.html

import re
hand = open('aspera.log')
for line in hand:
    line = line.rstrip()
    print line

---------------------

import re

mlog = open('aspera.log')
for line in mlog:
	line = line.rstrip()
	if re.search('FASP Session Statistics', line) :
		print line
		mpid = re.findall('\[([0-9]*)\]', line)
		print mpid
		tx_bytes = re.findall(' tx_bytes ([0-9]*) ', line)
		print tx_bytes
		tx_time = re.findall(' tx_time ([0-9]*)\)', line)
		print tx_time


Jan 31 17:22:50 sldc1 ascp[21560]: LOG FASP Session Statistics [Sender] id=cc66cb54-103b-4eb0-8c4c-44453156da9e delay=252ms rex_delay=8ms solicited_rex=0.00% unsolicited_rex=66.67% ave_xmit_rate 0.00Kbps effective=33.33% effective_rate=0.00Kbps (detail: good_blks 1 bl_total 3 bl_orig3 bl_rex 0 dup_last_blks 2) (sndr ctl: sent 1 rcvd 1 lost 0 lost 0.00%) (rcvr ctl: sent 9 rcvd 6 lost 3 lost 33.33%) (rex  ctl: sent 0 rcvd 0 lost 0 lost 0.00%) (progress: tx_bytes 67 file_bytes 67 tx_time 667835) (estimate transfer size: 67 bytes)  sess->instru.num_rex_xfer_not_found 0 sess->instru.num_rex_abrtxfer_not_found 0
['21560']
['67']
['667835']

---- output of re.findall('regex', line) is a list [ 'string' ]  & we need a integer

http://stackoverflow.com/questions/7368789/convert-all-strings-in-a-list-to-int

-------------

import re

mlog = open('aspera.log')
for line in mlog:
	line = line.rstrip()
	mydata = []
	if re.search('FASP Session Statistics', line) :
		print line
		mydata.append(int(re.findall('\[([0-9]*)\]', line)[0]))
		mydata.append(int(re.findall(' tx_bytes ([0-9]*) ', line)[0]))
		mydata.append(int(re.findall(' tx_time ([0-9]*)\)', line)[0]))
		print mydata

------------

Jan 31 17:22:41 sldc1 ascp[21568]: LOG FASP Session Statistics [Sender] id=6d2d5fe0-678c-4a5d-95d7-26f3e615e0cd delay=47ms rex_delay=8ms solicited_rex=0.00% unsolicited_rex=0.00% ave_xmit_rate 0.00Kbps effective=100.00% effective_rate=0.00Kbps (detail: good_blks 1 bl_total 1 bl_orig1 bl_rex 0 dup_last_blks 0) (sndr ctl: sent 21 rcvd 20 lost 1 lost 4.76%) (rcvr ctl: sent 28 rcvd 28 lost 0 lost 0.00%) (rex  ctl: sent 0 rcvd 0 lost 0 lost 0.00%) (progress: tx_bytes 67 file_bytes 67 tx_time 662275) (estimate transfer size: 67 bytes)  sess->instru.num_rex_xfer_not_found 0 sess->instru.num_rex_abrtxfer_not_found 0
[21568, 67, 662275]

---- now we need to load it into a numpy array so we can sort it ---

http://stackoverflow.com/questions/5951135/how-to-save-a-list-as-numpy-array-in-python

$ sudo apt-get install python-numpy

>>> from numpy import array
>>> a = array( [[2,3,4],[5,6,7],[8,9,10]] )   < here we are loading a list of lists into an array
>>> print a
[[ 2  3  4]
 [ 5  6  7]
 [ 8  9 10]]

http://cs231n.github.io/python-numpy-tutorial/#numpy

def quicksort(arr):
    if len(arr) <= 1:
        return arr
    pivot = arr[len(arr) / 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quicksort(left) + middle + quicksort(right)
    
print quicksort([3,6,8,10,1,2,1])
# Prints "[1, 1, 2, 3, 6, 8, 10]"

http://akuederle.com/create-numpy-array-with-for-loop

result_array = np.empty((0, 100))

for line in data_array:
    result = do_stuff(line)
    result_array = np.append(result_array, [result], axis=0)

=== FINALLY, after 2 hours of screwing around with it =====
http://akuederle.com/create-numpy-array-with-for-loop

>>> import numpy as np
>>> ra = np.empty((0,3))
>>> result = [1,2,3]
>>> ra = np.append(ra, [result], axis=0)
>>> print ra
[[ 1.  2.  3.]]
>>> result = [3,4,5]
>>> ra = np.append(ra, [result], axis=0)
>>> print ra
[[ 1.  2.  3.]
 [ 3.  4.  5.]]
>>> result = [5,6,7]
>>> ra = np.append(ra, [result], axis=0)
>>> print ra
[[ 1.  2.  3.]
 [ 3.  4.  5.]
 [ 5.  6.  7.]]
>>> 

=== to make the array hold integers:

>>> myarr = np.empty((0,3), dtype=int)
>>> result = [1,2,3]
>>> myarr = np.append(myarr, [result], axis=0)
>>> print myarr
[[1 2 3]]
>>> result = [4,5,6]
>>> myarr = np.append(myarr, [result], axis=0)
>>> result = [6,7,8]
>>> myarr = np.append(myarr, [result], axis=0)
>>> print myarr
[[1 2 3]
 [4 5 6]
 [6 7 8]]

==== ok, now let's figure out how to sort numpy array by column ===

>>> arr = np.empty((0,3), dtype=int)
>>> result = [6,7,8]
>>> arr = np.append(arr, [result], axis=0)
>>> result = [4,5,6]
>>> arr = np.append(arr, [result], axis=0)
>>> result = [1,2,3]
>>> arr = np.append(arr, [result], axis=0)
>>> print arr
[[6 7 8]
 [4 5 6]
 [1 2 3]]
>>> 
>>> result = [12,10,9]
>>> arr = np.append(arr, [result], axis=0)
>>> print arr
[[ 6  7  8]
 [ 4  5  6]
 [ 1  2  3]
 [12 10  9]]
>>> 
  ---- 2nd dim axis --->  axis=1, len=3 
 |
 1st  axis 0
 dim  len 4
 axis
 |
\ /

>>> arr.ndim
2
>>> arr.shape
(4, 3)
>>> arr.sort(axis=1)
>>> arr
array([[ 6,  7,  8],
       [ 4,  5,  6],
       [ 1,  2,  3],
       [ 9, 10, 12]])   <-- [12, 10, 9] got sorted to [9, 10, 12]
>>> arr.sort(axis=0)
>>> arr
array([[ 1,  2,  3],    <-- very kewl, sort by column, but ea row stays in tact
       [ 4,  5,  6],
       [ 6,  7,  8],
       [ 9, 10, 12]])
>>> 

===== to sort by a particular column =======

>>> data = np.array([[5,2], [4,1], [3,6]])
>>> print data
[[5 2]
 [4 1]
 [3 6]]
>>> col = 0
>>> data[np.argsort(data[:,col])]
array([[3, 6],
       [4, 1],
       [5, 2]])
>>> col = 1
>>> data[np.argsort(data[:,col])]
array([[4, 1],
       [5, 2],
       [3, 6]])


